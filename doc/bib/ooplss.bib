
@article{gabriel_why_1988,
	title = {The why of Y},
	volume = {2},
	issn = {1045-3563},
	url = {http://dx.doi.org/10.1145/1317250.1317252},
	abstract = {Did you ever wonder how Y works and how anyone could ever have thought of it? Do you feel like a Lisp weakling when some heavy-duty Scheme hacker kicks sand in your face by admiring Y in public? In this note I'll try to explain to you not only how it works, but how someone could have invented it. I'll use Scheme notation because it is easier to understand when functions passed as arguments are being applied. At the end, I'll show you Common Lisp equivalents of some of the Scheme code.},
	number = {2},
	journal = {{SIGPLAN} Lisp Pointers},
	author = {Richard Gabriel},
	year = {1988},
	keywords = {calculus, lambda},
	pages = {15--25}
},

@book{bruce_foundations_2002,
	address = {Cambridge  Mass.},
	title = {Foundations of object-oriented languages : types and semantics},
	isbn = {9780262025232},
	publisher = {{MIT} Press},
	author = {Kim Bruce},
	year = {2002}
},

@article{liskov_behavioral_1999,
	title = {Behavioral Subtyping Using Invariants and Constraints},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.28.2615},
	author = {Barbara H Liskov and Jeannette M Wing},
	year = {1999},
	pages = {254---280}
},

@book{pierce_types_2002,
	address = {Cambridge  Mass.},
	title = {Types and programming languages},
	isbn = {9780262162098},
	publisher = {{MIT} Press},
	author = {Benjamin Pierce},
	year = {2002}
},

@incollection{cardelli_type_1997,
	title = {Type Systems},
	booktitle = {The Computer Science and Engineering Handbook},
	publisher = {{CRC} Press},
	author = {Luca Cardelli},
	editor = {Allen B. Tucker},
	year = {1997},
	pages = {2208{\textendash}2236}
},

@book{pierce_basic_1991,
	address = {Cambridge  Mass.},
	title = {Basic category theory for computer scientists},
	isbn = {9780262660716},
	publisher = {{MIT} Press},
	author = {Benjamin Pierce},
	year = {1991}
},

@book{gamma_design_1995,
	address = {Reading  Mass.},
	title = {Design patterns : elements of reusable object-oriented software},
	isbn = {9780201633610},
	publisher = {{Addison-Wesley}},
	author = {Erich Gamma},
	year = {1995}
},

@article{abadi_subtyping_1996,
	title = {On Subtyping and Matching},
	volume = {18},
	issn = {0164-0925},
	url = {http://doi.acm.org/10.1145/233561.233563},
	doi = {http://doi.acm.org/10.1145/233561.233563},
	journal = {{ACM} Trans. Program. Lang. Syst.},
	author = {Mart\'{i}n Abadi and Luca Cardelli},
	month = jul,
	year = {1996},
	keywords = {F-bounded, matching, subtyping, type operators, type theory},
	pages = {401{\textendash}423}
},

@inproceedings{canning_f-bounded_1989,
	address = {New York, {NY,} {USA}},
	series = {{FPCA} '89},
	title = {F-bounded polymorphism for object-oriented programming},
	isbn = {0-89791-328-0},
	location = {Imperial College, London, United Kingdom},
	url = {http://doi.acm.org/10.1145/99370.99392},
	doi = {http://doi.acm.org/10.1145/99370.99392},
	booktitle = {Proceedings of the fourth international conference on Functional programming languages and computer architecture},
	publisher = {{ACM}},
	author = {Peter Canning and William Cook and Walter Hill and Walter Olthoff and John C Mitchell},
	year = {1989},
	pages = {273{\textendash}280}
},

@article{barron-estrada_inheritance_2003,
	title = {Inheritance, Generics and Binary Methods in Java},
	volume = {7},
	issn = {1405-5546},
	url = {http://www.scielo.org.mx/scielo.php?script=sci_arttext&pid=S1405-55462003000400005&nrm=iso},
	journal = {Computaci\'{o}n y Sistemas},
	author = {Mar\'{i}a Luc\'{i}a {Barr\'{o}n-Estrada} and Ryan Stansifer},
	year = {2003},
	pages = {113 -- 122}
},

@techreport{gawecki_tool:_1995,
	type = {fiderep},
	title = {{TooL:} A Persistent Language Integrating Subtyping, Matching and Type Quantification},
	number = {{FIDE/95/135}},
	institution = {fidecoord},
	author = {A. Gawecki and F. Matthes},
	year = {1995}
},

@incollection{gawecki_integrating_1996,
	series = {Lecture Notes in Computer Science},
	title = {Integrating subtyping, matching and type quantification: A practical perspective},
	volume = {1098},
	url = {http://dx.doi.org/10.1007/BFb0053055},
	booktitle = {{ECOOP} {\textquoteright}96 {\textemdash} {Object-Oriented} Programming},
	publisher = {Springer Berlin / Heidelberg},
	author = {Andreas Gawecki and Florian Matthes},
	editor = {Pierre Cointe},
	year = {1996},
	note = {{10.1007/BFb0053055}},
	pages = {26--47}
},

@inproceedings{bruce_binary_1995,
	title = {On Binary Methods},
	booktitle = {{IN} {SYMPOSIUM} {ON} {OBJECT-ORIENTED} {PROGRAMMING:} {SYSTEMS,} {LANGUAGES,} {AND} {APPLICATIONS,} {ACM}},
	publisher = {Harvard University Press},
	author = {Kim Bruce and Gary T. Leavens and Giuseppe Castagna and Luca Cardelli and Benjamin Pierce},
	year = {1995},
	pages = {227{\textendash}256}
},

@book{stroustrup_c++_2000,
	address = {Boston, {MA,} {USA}},
	edition = {3rd},
	title = {The C++ Programming Language},
	isbn = {0201700735},
	publisher = {{Addison-Wesley} Longman Publishing Co., Inc.},
	author = {Bjarne Stroustrup},
	year = {2000}
},

@book{bruce_subtyping_1997,
	title = {Subtyping is not a good {`Match'} for object-oriented languages},
	author = {Kim B. Bruce and Leaf Petersen and Adrian Fiech},
	year = {1997}
},

@incollection{bruce_polytoil:_1995,
	series = {Lecture Notes in Computer Science},
	title = {{PolyTOIL:} A {Type-Safe} Polymorphic {Object-Oriented} Language},
	volume = {952},
	url = {http://dx.doi.org/10.1007/3-540-49538-X_3},
	abstract = {{PolyTOIL} is a new statically-typed polymorphic object-oriented programming language which is provably type-safe. By separating the definitions of subtyping and inheritance, providing a name for the type of self, and carefully defining the type-checking rules, we have obtained a language which is very expressive while supporting modular type-checking of classes. The matching relation on types, which is related to F-bounded quantification, is used both in stating type-checking rules and expressing the bounds on type parameters for polymorphism. The design of {PolyTOIL} is based on a careful formal definition of type-checking rules and semantics. A proof of type safety is obtained with the aid of a subject reduction theorem.},
	booktitle = {{ECOOP{\textquoteright}95} {\textemdash} {Object-Oriented} Programming, 9th European Conference, \r{A}arhus, Denmark, August 7{\textendash}11, 1995},
	publisher = {Springer Berlin / Heidelberg},
	author = {Kim Bruce and Angela Schuett and Robert van Gent},
	editor = {Mario Tokoro and Remo Pareschi},
	year = {1995},
	note = {{10.1007/3-540-49538-X\_3}},
	pages = {27--51}
},

@book{parr_definitive_2007,
	address = {The Pragmatic Programmers, {LLC}},
	title = {The Definitive {ANTLR} Reference: Building {Domain-Specific} Languages},
	isbn = {978-0-9787392-5-6},
	url = {http://www.pragprog.com/titles/tpantlr/the-definitive-antlr-reference},
	publisher = {The Pragmatic Programmers, {LLC}},
	author = {Terence Parr},
	year = {2007}
},

@book{cartwright_compatible_1998,
	title = {Compatible Genericity with Run-time Types for the Java Programming Language},
	author = {Robert Cartwright and Guy L. Steele Jr and Sun Microsystems Laboratories},
	year = {1998}
},

@book{poll_behavioural_1998,
	title = {Behavioural Subtyping for a {Type-Theoretic} Model of Objects},
	author = {Erik Poll},
	year = {1998}
},

@techreport{odersky_scala_2010,
	title = {The Scala Language Specification Version 2.8},
	location = {Lausanne, Switzerland},
	institution = {{EPFL}},
	author = {Martin Odersky},
	month = nov,
	year = {2010},
	keywords = {scala, unicode}
},

@article{odersky_overview_2004,
	title = {An overview of the Scala programming language},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.164.7516},
	author = {Martin Odersky and St\'{e}phane Micheloud and Nikolay Mihaylov and Michel Schinz and Erik Stenman and Matthias Zenger and et al.},
	year = {2004}
},

@book{parr_language_2009,
	title = {Language Implementation Patterns: Create Your Own {Domain-Specific} and General Programming Languages},
	abstract = {Learn to build configuration file readers, data readers, model-driven code generators, source-to-source translators, source analyzers, and interpreters. You don't need a background in computer {science{\textemdash}ANTLR} creator Terence Parr demystifies language implementation by breaking it down into the most common design patterns. Pattern by pattern, you'll learn the key skills you need to implement your own computer languages.},
	publisher = {The Pragmatic Bookshelf},
	author = {Terence Parr},
	year = {2009},
	keywords = {language\_implementation}
},

@inproceedings{malayeri_integrating_2008,
	address = {Berlin, Heidelberg},
	series = {{ECOOP} '08},
	title = {Integrating Nominal and Structural Subtyping},
	isbn = {978-3-540-70591-8},
	location = {Paphos, Cypress},
	url = {http://dx.doi.org/10.1007/978-3-540-70592-5_12},
	doi = {10.1007/978-3-540-70592-5_12},
	abstract = {Nominal and structural subtyping each have their own strengths and weaknesses. Nominal subtyping allows programmers to explicitly express design intent, and, when types are associated with run time tags, enables run-time type tests and external method dispatch. On the other hand, structural subtyping is flexible and compositional, allowing unanticipated reuse. To date, nearly all object-oriented languages fully support one subtyping paradigm or the {other.In} this paper, we describe a core calculus for a language that integrates the key aspects of nominal and structural subtyping in a unified framework. We have also merged the flexibility of structural subtyping with statically typechecked external methods, a novel combination. We prove type safety for this language and illustrate its practical utility through examples that are not easily expressed in other languages. Our work provides a clean foundation for the design of future languages that enjoy the benefits of both nominal and structural subtyping.},
	booktitle = {Proceedings of the 22nd European conference on {Object-Oriented} Programming},
	publisher = {{Springer-Verlag}},
	author = {Donna Malayeri and Jonathan Aldrich},
	year = {2008},
	keywords = {structural-subtyping, subtyping, types},
	pages = {260{\textendash}284}
},

@book{kennedy_decidability_2006,
	title = {On Decidability of Nominal Subtyping with Variance},
	author = {Andrew J. Kennedy and Benjamin C. Pierce},
	month = sep,
	year = {2006},
	note = {{FOOL-WOOD} '07}
},

@article{cook_denotational_1995,
	title = {A Denotational Semantics of Inheritance and its Correctness},
	url = {http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.11.8792},
	author = {William Cook and Jens Palsberg},
	year = {1995}
},

@article{dreyer_type_2003,
	title = {A type system for higher-order modules},
	volume = {38},
	issn = {0362-1340},
	url = {http://doi.acm.org/10.1145/640128.604151},
	doi = {http://doi.acm.org/10.1145/640128.604151},
	journal = {{SIGPLAN} Not.},
	author = {Derek Dreyer and Karl Crary and Robert Harper},
	month = jan,
	year = {2003},
	keywords = {abstract data types, computational effects, functors, generativity, modularity, singleton types, type theory},
	pages = {236{\textendash}249}
},

@article{findler_behavioral_2001,
	title = {Behavioral Contracts and Behavioral Subtyping},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.20.5918},
	journal = {{IN} {PROCEEDINGS} {OF} {ACM} {CONFERENCE} {FOUNDATIONS} {OF} {SOFTWARE} {ENGINEERING}},
	author = {Robert Bruce Findler and Mario Latendresse and Matthias Felleisen},
	year = {2001},
	pages = {229---236}
},

@inproceedings{cameron_existential_2009,
	address = {Berlin, Heidelberg},
	series = {{ESOP} '09},
	title = {Existential Quantification for Variant Ownership},
	isbn = {978-3-642-00589-3},
	location = {York, {UK}},
	url = {http://dx.doi.org/10.1007/978-3-642-00590-9_10},
	doi = {http://dx.doi.org/10.1007/978-3-642-00590-9_10},
	booktitle = {Proceedings of the 18th European Symposium on Programming Languages and Systems: Held as Part of the Joint European Conferences on Theory and Practice of Software, {ETAPS} 2009},
	publisher = {{Springer-Verlag}},
	author = {Nicholas Cameron and Sophia Drossopoulou},
	year = {2009},
	pages = {128{\textendash}142}
},

@article{steffen_higher-order_1994,
	title = {{Higher-Order} Subtyping},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.17.2832},
	author = {Martin Steffen and Benjamin Pierce},
	year = {1994}
},

@article{bracha_mixin-based_1990,
	title = {Mixin-based Inheritance},
	volume = {25},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.57.5388},
	author = {Gilad Bracha and William Cook},
	year = {1990},
	pages = {303---311}
},

@article{ducasse_traits:_2006,
	title = {Traits: A mechanism for fine-grained reuse},
	volume = {28},
	shorttitle = {Traits},
	url = {http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.64.2480},
	journal = {{TRANSACTIONS} {ON} {PROGRAMMING} {LANGUAGES} {AND} {SYSTEMS}},
	author = {St\'{e}phane Ducasse and Oscar Nierstrasz and Nathanael Sch\"{a}rli and Andrew P Black},
	year = {2006},
	pages = {2006}
},

@article{taivalsaari_notion_1996,
	title = {On the Notion of Inheritance},
	volume = {28},
	url = {http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.110.7221},
	journal = {{ACM} {COMPUTING} {SURVEYS}},
	author = {Antero Taivalsaari},
	year = {1996},
	pages = {438---479}
},

@incollection{schaerli_traits:_2003,
	series = {Lecture Notes in Computer Science},
	title = {Traits: Composable Units of Behaviour},
	volume = {2743},
	url = {http://dx.doi.org/10.1007/978-3-540-45070-2_12},
	booktitle = {{ECOOP} 2003 {\textendash} {Object-Oriented} Programming},
	publisher = {Springer Berlin / Heidelberg},
	author = {Nathanael Sch\"{a}rli and St\'{e}phane Ducasse and Oscar Nierstrasz and Andrew Black},
	editor = {Luca Cardelli},
	year = {2003},
	note = {10.1007/978-3-540-45070-2\_12},
	pages = {327--339}
}
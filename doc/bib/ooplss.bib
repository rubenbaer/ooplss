
@techreport{odersky_scala_2010,
	title = {The Scala Language Specification Version 2.8},
	location = {Lausanne, Switzerland},
	institution = {{EPFL}},
	author = {Martin Odersky},
	month = nov,
	year = {2010}
},

@inproceedings{canning_f-bounded_1989,
	address = {New York, {NY,} {USA}},
	series = {{FPCA} '89},
	title = {F-bounded polymorphism for object-oriented programming},
	isbn = {0-89791-328-0},
	location = {Imperial College, London, United Kingdom},
	url = {http://doi.acm.org/10.1145/99370.99392},
	doi = {http://doi.acm.org/10.1145/99370.99392},
	booktitle = {Proceedings of the fourth international conference on Functional programming languages and computer architecture},
	publisher = {{ACM}},
	author = {Peter Canning and William Cook and Walter Hill and Walter Olthoff and John C Mitchell},
	year = {1989},
	pages = {273–280}
},

@article{abadi_subtyping_1996,
	title = {On Subtyping and Matching},
	volume = {18},
	issn = {0164-0925},
	url = {http://doi.acm.org/10.1145/233561.233563},
	doi = {http://doi.acm.org/10.1145/233561.233563},
	journal = {{ACM} Trans. Program. Lang. Syst.},
	author = {Martín Abadi and Luca Cardelli},
	month = jul,
	year = {1996},
	keywords = {related},
	pages = {401–423}
},

@article{odersky_overview_2004,
	title = {An overview of the Scala programming language},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.164.7516},
	author = {Martin Odersky and Stéphane Micheloud and Nikolay Mihaylov and Michel Schinz and Erik Stenman and Matthias Zenger and et al.},
	year = {2004}
},

@article{igarashi_featherweight_1999,
	title = {Featherweight Java: A Minimal Core Calculus for Java and {GJ}},
	volume = {23},
	shorttitle = {Featherweight Java},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.109.1141},
	journal = {{ACM} Transactions on Programming Languages and Systems},
	author = {Atsushi Igarashi and Benjamin C Pierce and Philip Wadler},
	year = {1999},
	pages = {132---146}
},

@book{pierce_basic_1991,
	address = {Cambridge  Mass.},
	title = {Basic category theory for computer scientists},
	isbn = {9780262660716},
	publisher = {{MIT} Press},
	author = {Benjamin Pierce},
	year = {1991}
},

@article{gabriel_why_1988,
	title = {The why of Y},
	volume = {2},
	issn = {1045-3563},
	url = {http://dx.doi.org/10.1145/1317250.1317252},
	abstract = {Did you ever wonder how Y works and how anyone could ever have thought of it? Do you feel like a Lisp weakling when some heavy-duty Scheme hacker kicks sand in your face by admiring Y in public? In this note I'll try to explain to you not only how it works, but how someone could have invented it. I'll use Scheme notation because it is easier to understand when functions passed as arguments are being applied. At the end, I'll show you Common Lisp equivalents of some of the Scheme code.},
	number = {2},
	journal = {{SIGPLAN} Lisp Pointers},
	author = {Richard Gabriel},
	year = {1988},
	pages = {15--25}
},

@incollection{bruce_polytoil:_1995,
	series = {Lecture Notes in Computer Science},
	title = {{PolyTOIL:} A {Type-Safe} Polymorphic {Object-Oriented} Language},
	volume = {952},
	url = {http://dx.doi.org/10.1007/3-540-49538-X_3},
	abstract = {{PolyTOIL} is a new statically-typed polymorphic object-oriented programming language which is provably type-safe. By separating the definitions of subtyping and inheritance, providing a name for the type of self, and carefully defining the type-checking rules, we have obtained a language which is very expressive while supporting modular type-checking of classes. The matching relation on types, which is related to F-bounded quantification, is used both in stating type-checking rules and expressing the bounds on type parameters for polymorphism. The design of {PolyTOIL} is based on a careful formal definition of type-checking rules and semantics. A proof of type safety is obtained with the aid of a subject reduction theorem.},
	booktitle = {{ECOOP’95} — {Object-Oriented} Programming, 9th European Conference, Åarhus, Denmark, August 7–11, 1995},
	publisher = {Springer Berlin / Heidelberg},
	author = {Kim Bruce and Angela Schuett and Robert van Gent},
	editor = {Mario Tokoro and Remo Pareschi},
	year = {1995},
	note = {{10.1007/3-540-49538-X\_3}},
	keywords = {related},
	pages = {27--51}
},

@incollection{cardelli_type_1997,
	title = {Type Systems},
	booktitle = {The Computer Science and Engineering Handbook},
	publisher = {{CRC} Press},
	author = {Luca Cardelli},
	editor = {Allen B. Tucker},
	year = {1997},
	pages = {2208–2236}
},

@book{gamma_design_1995,
	address = {Reading  Mass.},
	title = {Design patterns : elements of reusable object-oriented software},
	isbn = {9780201633610},
	publisher = {{Addison-Wesley}},
	author = {Erich Gamma},
	year = {1995}
},

@article{barron-estrada_inheritance_2003,
	title = {Inheritance, Generics and Binary Methods in Java},
	volume = {7},
	issn = {1405-5546},
	url = {http://www.scielo.org.mx/scielo.php?script=sci_arttext&pid=S1405-55462003000400005&nrm=iso},
	journal = {Computación y Sistemas},
	author = {María Lucía {Barrón-Estrada} and Ryan Stansifer},
	year = {2003},
	pages = {113 -- 122}
},

@book{bruce_foundations_2002,
	address = {Cambridge  Mass.},
	title = {Foundations of object-oriented languages : types and semantics},
	isbn = {9780262025232},
	publisher = {{MIT} Press},
	author = {Kim Bruce},
	year = {2002},
	keywords = {related}
},

@book{parr_definitive_2007,
	address = {The Pragmatic Programmers, {LLC}},
	title = {The Definitive {ANTLR} Reference: Building {Domain-Specific} Languages},
	isbn = {978-0-9787392-5-6},
	url = {http://www.pragprog.com/titles/tpantlr/the-definitive-antlr-reference},
	publisher = {The Pragmatic Programmers, {LLC}},
	author = {Terence Parr},
	year = {2007}
},

@techreport{gawecki_tool:_1995,
	type = {fiderep},
	title = {{TooL:} A Persistent Language Integrating Subtyping, Matching and Type Quantification},
	number = {{FIDE/95/135}},
	institution = {fidecoord},
	author = {A. Gawecki and F. Matthes},
	year = {1995},
	keywords = {related}
},

@incollection{gawecki_integrating_1996,
	series = {Lecture Notes in Computer Science},
	title = {Integrating subtyping, matching and type quantification: A practical perspective},
	volume = {1098},
	url = {http://dx.doi.org/10.1007/BFb0053055},
	booktitle = {{ECOOP} ’96 — {Object-Oriented} Programming},
	publisher = {Springer Berlin / Heidelberg},
	author = {Andreas Gawecki and Florian Matthes},
	editor = {Pierre Cointe},
	year = {1996},
	note = {{10.1007/BFb0053055}},
	pages = {26--47}
},

@book{parr_language_2009,
	title = {Language Implementation Patterns: Create Your Own {Domain-Specific} and General Programming Languages},
	abstract = {Learn to build configuration file readers, data readers, model-driven code generators, source-to-source translators, source analyzers, and interpreters. You don't need a background in computer {science—ANTLR} creator Terence Parr demystifies language implementation by breaking it down into the most common design patterns. Pattern by pattern, you'll learn the key skills you need to implement your own computer languages.},
	publisher = {The Pragmatic Bookshelf},
	author = {Terence Parr},
	year = {2009}
},

@inproceedings{bruce_binary_1995,
	title = {On Binary Methods},
	booktitle = {In Symposium on object-oriented programming: systems, languages, and applications, {ACM}},
	publisher = {Harvard University Press},
	author = {Kim Bruce and Gary T. Leavens and Giuseppe Castagna and Luca Cardelli and Benjamin Pierce},
	year = {1995},
	keywords = {related},
	pages = {227–256}
},

@book{pierce_types_2002,
	address = {Cambridge  Mass.},
	title = {Types and programming languages},
	isbn = {9780262162098},
	publisher = {{MIT} Press},
	author = {Benjamin Pierce},
	year = {2002}
},

@inproceedings{malayeri_integrating_2008,
	address = {Berlin, Heidelberg},
	series = {{ECOOP} '08},
	title = {Integrating Nominal and Structural Subtyping},
	isbn = {978-3-540-70591-8},
	location = {Paphos, Cypress},
	url = {http://dx.doi.org/10.1007/978-3-540-70592-5_12},
	doi = {10.1007/978-3-540-70592-5_12},
	abstract = {Nominal and structural subtyping each have their own strengths and weaknesses. Nominal subtyping allows programmers to explicitly express design intent, and, when types are associated with run time tags, enables run-time type tests and external method dispatch. On the other hand, structural subtyping is flexible and compositional, allowing unanticipated reuse. To date, nearly all object-oriented languages fully support one subtyping paradigm or the {other.In} this paper, we describe a core calculus for a language that integrates the key aspects of nominal and structural subtyping in a unified framework. We have also merged the flexibility of structural subtyping with statically typechecked external methods, a novel combination. We prove type safety for this language and illustrate its practical utility through examples that are not easily expressed in other languages. Our work provides a clean foundation for the design of future languages that enjoy the benefits of both nominal and structural subtyping.},
	booktitle = {Proceedings of the 22nd European conference on {Object-Oriented} Programming},
	publisher = {{Springer-Verlag}},
	author = {Donna Malayeri and Jonathan Aldrich},
	year = {2008},
	pages = {260–284}
},

@book{kennedy_decidability_2006,
	title = {On Decidability of Nominal Subtyping with Variance},
	author = {Andrew J. Kennedy and Benjamin C. Pierce},
	month = sep,
	year = {2006},
	note = {{FOOL-WOOD} '07}
},

@article{findler_behavioral_2001,
	title = {Behavioral Contracts and Behavioral Subtyping},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.20.5918},
	journal = {In proceedings of {ACM} conference foundations of software engineering},
	author = {Robert Bruce Findler and Mario Latendresse and Matthias Felleisen},
	year = {2001},
	pages = {229---236}
},

@book{stroustrup_c++_2000,
	address = {Boston, {MA,} {USA}},
	edition = {3rd},
	title = {The C++ Programming Language},
	isbn = {0201700735},
	publisher = {{Addison-Wesley} Longman Publishing Co., Inc.},
	author = {Bjarne Stroustrup},
	year = {2000}
},

@article{dreyer_type_2003,
	title = {A type system for higher-order modules},
	volume = {38},
	issn = {0362-1340},
	url = {http://doi.acm.org/10.1145/640128.604151},
	doi = {http://doi.acm.org/10.1145/640128.604151},
	journal = {{SIGPLAN} Not.},
	author = {Derek Dreyer and Karl Crary and Robert Harper},
	month = jan,
	year = {2003},
	pages = {236–249}
},

@inproceedings{cameron_existential_2009,
	address = {Berlin, Heidelberg},
	series = {{ESOP} '09},
	title = {Existential Quantification for Variant Ownership},
	isbn = {978-3-642-00589-3},
	location = {York, {UK}},
	url = {http://dx.doi.org/10.1007/978-3-642-00590-9_10},
	doi = {http://dx.doi.org/10.1007/978-3-642-00590-9_10},
	booktitle = {Proceedings of the 18th European Symposium on Programming Languages and Systems: Held as Part of the Joint European Conferences on Theory and Practice of Software, {ETAPS} 2009},
	publisher = {{Springer-Verlag}},
	author = {Nicholas Cameron and Sophia Drossopoulou},
	year = {2009},
	pages = {128–142}
},

@article{steffen_higher-order_1994,
	title = {{Higher-Order} Subtyping},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.17.2832},
	author = {Martin Steffen and Benjamin Pierce},
	year = {1994},
	keywords = {related}
},

@article{taivalsaari_notion_1996,
	title = {On the Notion of Inheritance},
	volume = {28},
	url = {http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.110.7221},
	journal = {{ACM} Computing survery},
	author = {Antero Taivalsaari},
	year = {1996},
	keywords = {related},
	pages = {438---479}
},

@inproceedings{cook_inheritance_1990,
	address = {New York, {NY,} {USA}},
	series = {{POPL} '90},
	title = {Inheritance is not subtyping},
	isbn = {0-89791-343-4},
	location = {San Francisco, California, United States},
	url = {http://doi.acm.org/10.1145/96709.96721},
	doi = {http://doi.acm.org/10.1145/96709.96721},
	booktitle = {Proceedings of the 17th {ACM} {SIGPLAN-SIGACT} symposium on Principles of programming languages},
	publisher = {{ACM}},
	author = {William R Cook and Walter Hill and Peter S Canning},
	year = {1990},
	keywords = {related},
	pages = {125–135}
},

@article{ducasse_traits:_2006,
	title = {Traits: A mechanism for fine-grained reuse},
	volume = {28},
	shorttitle = {Traits},
	url = {http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.64.2480},
	journal = {Transactions on programming languages and systems},
	author = {Stéphane Ducasse and Oscar Nierstrasz and Nathanael Schärli and Andrew P Black},
	year = {2006},
	keywords = {related},
	pages = {2006}
},

@incollection{schaerli_traits:_2003,
	series = {Lecture Notes in Computer Science},
	title = {Traits: Composable Units of Behaviour},
	volume = {2743},
	url = {http://dx.doi.org/10.1007/978-3-540-45070-2_12},
	booktitle = {{ECOOP} 2003 – {Object-Oriented} Programming},
	publisher = {Springer Berlin / Heidelberg},
	author = {Nathanael Schärli and Stéphane Ducasse and Oscar Nierstrasz and Andrew Black},
	editor = {Luca Cardelli},
	year = {2003},
	note = {10.1007/978-3-540-45070-2\_12},
	keywords = {related},
	pages = {327--339}
},

@article{bracha_mixin-based_1990,
	title = {Mixin-based Inheritance},
	volume = {25},
	url = {http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.57.5388},
	author = {Gilad Bracha and William Cook},
	year = {1990},
	keywords = {related},
	pages = {303---311}
},

@article{cook_denotational_1989,
	title = {A denotational semantics of inheritance and its correctness},
	volume = {24},
	issn = {0362-1340},
	url = {http://doi.acm.org/10.1145/74878.74922},
	doi = {http://doi.acm.org/10.1145/74878.74922},
	journal = {{SIGPLAN} Not.},
	author = {W. Cook and J. Palsberg},
	month = sep,
	year = {1989},
	pages = {433–443}
},

@incollection{liskov_behavioral_2001,
	address = {New York, {NY,} {USA}},
	title = {Behavioral Subtyping Using Invariants and Constraints},
	isbn = {0-521-77184-6},
	url = {http://portal.acm.org/citation.cfm?id=566795.566811},
	booktitle = {Formal methods for distributed processing},
	publisher = {Cambridge University Press},
	author = {Barbara H Liskov and Jeannette M Wing},
	year = {2001},
	pages = {254–280}
},

@book{odersky_programming_2008,
	address = {Mountain View  Calif.},
	edition = {1st ed., version 9},
	title = {Programming in Scala},
	isbn = {9780981531601},
	publisher = {Artima},
	author = {Martin Odersky and Lex Spoon and Bill Venners},
	year = {2008}
},

@inproceedings{gil_whiteoak:_2008,
	address = {New York, {NY,} {USA}},
	series = {{OOPSLA} '08},
	title = {Whiteoak: introducing structural typing into java},
	isbn = {978-1-60558-215-3},
	location = {Nashville, {TN,} {USA}},
	url = {http://doi.acm.org/10.1145/1449764.1449771},
	doi = {http://doi.acm.org/10.1145/1449764.1449771},
	booktitle = {Proceedings of the 23rd {ACM} {SIGPLAN} conference on Object-oriented programming systems languages and applications},
	publisher = {{ACM}},
	author = {Joseph Gil and Itay Maman},
	year = {2008},
	keywords = {abstraction, java, structural subtyping},
	pages = {73–90}
},

@incollection{findler_semantic_2004,
	address = {Berlin, Heidelberg},
	series = {Lecture Notes in Computer Science},
	title = {Semantic Casts: Contracts and Structural Subtyping in a Nominal World},
	volume = {3086},
	isbn = {978-3-540-22159-3},
	url = {http://dx.doi.org/10.1007/978-3-540-24851-4_17},
	abstract = {Nominal subtyping forces programmers to explicitly state all of the subtyping relationships in the program. This limits component reuse, because programmers cannot anticipate all of the contexts in which a particular class might be used. In contrast, structural subtyping implicitly allows any type with appropriate structure to be used in a given context. Languagues with contracts exacerbate the problem. Since contracts are typically expressed as refinements of types, contracts in nominally typed languages introduce additional obstacles to reuse. To overcome this problem we show how to extend a nominally typed language with semantic casts that introduce a limited form of structural subtyping. The new language must dynamically monitor contracts, as new subtyping relationships are exploited via semantic casts. In addition, it must also track the casts to properly assign blame in case interface contract are violated.},
	booktitle = {{ECOOP} 2004 – {Object-Oriented} Programming},
	publisher = {Springer Berlin / Heidelberg},
	author = {Robert B Findler and Matthew Flatt and Matthias Felleisen},
	editor = {Odersky},
	year = {2004},
	keywords = {blame, java, oop, types},
	pages = {614–639}
},

@inproceedings{bruce_looj:_2004,
	title = {{LOOJ:} Weaving {LOOM} into Java},
	booktitle = {{ECOOP}},
	author = {Kim B. Bruce and J. Nathan Foster},
	year = {2004},
	pages = {389--413}
},

@article{cartwright_compatible_1998,
	title = {Compatible genericity with run-time types for the Java programming language},
	volume = {33},
	issn = {0362-1340},
	url = {http://doi.acm.org/10.1145/286942.286958},
	doi = {http://doi.acm.org/10.1145/286942.286958},
	journal = {{SIGPLAN} Not.},
	author = {Robert Cartwright and Jr. Steele},
	month = oct,
	year = {1998},
	pages = {201–215}
},

@inproceedings{poll_behavioural_1998,
	title = {Behavioural Subtyping for a {Type-Theoretic} Model of Objects},
	url = {http://www.cs.kent.ac.uk/pubs/1998/481},
	booktitle = {{FOOL5:} Fifth International Workshop on Foundations of {Object-Oriented} Languages},
	author = {Erik Poll},
	month = jan,
	year = {1998},
	keywords = {behavioural, subtyping}
},

@incollection{bruce_subtyping_1997,
	title = {Subtyping is not a good `match' for object-oriented languages},
	url = {http://dx.doi.org/10.1007/BFb0053376},
	abstract = {We present the design and rationale of a new statically-typed object-oriented language, {LOOM.} {LOOM,} retains most of the features of the earlier language {PolyTOIL.} However the subtyping relation is dropped from {LOOM} in favor of the matching relation. ” Hash types”, which are denned in terms of matching, are introduced to provide some of the benefits of subtyping. These types can be used to provide support for heterogeneous data stuctures in {LOOM.} {LOOM.} is considerably simpler than {PolyTOIL,} yet is just as expressive. The type system for the language is decidable and provably type safe. The addition of modules to the language provides better control over information hiding and allows the provision of access like that of C++'s friends.},
	booktitle = {{ECOOP'97} — {Object-Oriented} Programming},
	author = {Kim Bruce and Leaf Petersen and Adrian Fiech},
	year = {1997},
	keywords = {rg-2004},
	pages = {104–127}
}
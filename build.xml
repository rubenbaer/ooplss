<?xml version="1.0" encoding="UTF-8"?>
<project name="Object-Oriented Programming Language with Subtyping and Subclassing" default="build" basedir=".">
	<property name="src" location="src" />
	<property name="destjar" location="ooplss.jar" />
	<property name="build" location="build" />
	<property name="dist" location="dist" />
	<property name="reports" location="reports" />
	<property name="grammar" location="grammar" />
	<property name="javadoc" location="doxygen" />
	<property name="antlr-outputdir" location="${src}/ch/codedump/ooplss/antlr/" />
	<property name="lib" location="lib"/>
	<property name="antlrjar" location="${lib}/antlr-master-3.3.1-SNAPSHOT-completejar.jar"/>
	<property name="antlr-tasks" location="${lib}/ant-antlr3.jar" />
	<property name="contrib-tasks" location="${lib}/ant-contrib.jar" />
	<property name="gunit-testdir" location="${grammar}/test" />

	<path id="classpath">
		<fileset dir="${lib}" includes="**/*.jar" excludes="antlr-3.3-complete.jar"/>
		<pathelement path="${build}" />
	</path>

	<taskdef resource="org/apache/tools/ant/antlr/antlib.xml"
		classpath="${antlr-tasks}" />

	<taskdef resource="net/sf/antcontrib/antcontrib.properties"
		classpath="${contrib-tasks}" />
	
	<!-- CLEAN -->
	<target name="clean" depends="clean-build,clean-misc,clean-antlr,clean-latex">
	</target>
	
	<target name="clean-build">
		<delete dir="${build}" />
		<delete dir="${javadoc}" />
		<delete file="${destjar}" />
		<delete dir="reports" />
	</target>

	<target name="clean-misc">
		<delete>
			<fileset dir="misc" includes="**/*.class" />
		</delete>
	</target>
	
	<target name="clean-antlr">
		<delete dir="${antlr-outputdir}" />
		<delete dir="grammar/output" />
	</target>
	
	<target name="clean-latex">
		<exec executable="make" dir="doc">
			<arg value="distclean" />
		</exec>
	</target>

	<target name="dist-clean">
		<delete dir="${dist}" />
	</target>

	<!-- BUILD -->

	<target name="build" depends="clean,build-src">
	</target>

	<target name="build-src" depends="build-grammar">
		<mkdir dir="${build}" />
		<javac srcdir="src/" destdir="${build}" debug="on" debuglevel="lines,vars,source" includeantruntime="false" >
			<classpath refid="classpath" />
		</javac>
	</target>

	<target name="build-test" depends="build-src">
		<javac srcdir="test/" destdir="${build}" debug="on" debuglevel="lines,vars,source" includeantruntime="false" >
			<classpath refid="classpath" />
		</javac>
	</target>

	<target name="build-grammar" depends="clean-antlr">
		<mkdir dir="${antlr-outputdir}" />
		<ant-antlr3
			target="${grammar}/Ooplss.g"
			verbose="true"
			outputdirectory="${antlr-outputdir}">
			<classpath refid="classpath" />
		</ant-antlr3>
		<ant-antlr3
			target="${grammar}/OoplssDef.g"
			verbose="true"
			outputdirectory="${antlr-outputdir}">
			<classpath refid="classpath" />
		</ant-antlr3>
		<ant-antlr3
			target="${grammar}/OoplssRef.g"
			verbose="true"
			outputdirectory="${antlr-outputdir}">
			<classpath refid="classpath" />
		</ant-antlr3>
		<ant-antlr3
			target="${grammar}/OoplssTypes.g"
			verbose="true"
			outputdirectory="${antlr-outputdir}">
			<classpath refid="classpath" />
		</ant-antlr3>

		<!-- Post process generated files -->
		<dirname property="projecthome" file="build.xml" />
		<replace 
			dir="src/ch/codedump/ooplss/antlr"
			includes="*"
			token="// ${projecthome}/"
			value="// " />

		<copy file="grammar/package-info.java" todir="src/ch/codedump/ooplss/antlr" />
	</target>

	<!-- Documentation-->

	<target name="doc" depends="latex,javadoc">
	</target>

	<target name="latex" depends="latex-draft">
	</target>

	<target name="latex-draft">
		<!-- Execute Makefile -->
		<exec executable="make" dir="doc">
			<arg value="draft" />
		</exec>
	</target>

	<target name="latex-final">
		<!-- Execute Makefile -->
		<exec executable="make" dir="doc">
			<arg value="final" />
		</exec>
	</target>

	<target name="javadoc">
		<exec executable="doxygen">
			<arg value=".doxygen.config" />
		</exec>
		<exec executable="make" dir="doxygen/latex" />
	</target>

	<!-- Create distribution package -->
	<target name="dist" depends="dist-clean,jar,javadoc,latex-final,clean-latex,build-dist,pack">
		<antcall target="clean" />
	</target>

	<target name="pack">
	</target>

	<target name="build-dist">
		<mkdir dir="${dist}" />
		<mkdir dir="${dist}/lib" />
		<move file="${destjar}" todir="${dist}" />
		<copy todir="${dist}/html" >
			<fileset dir="doxygen/html" />
		</copy>
		<copy todir="${dist}">
			<fileset dir="doc" includes="ooplss*.pdf" />
		</copy>
		<copy file="doxygen/latex/refman.pdf" tofile="${dist}/source.pdf" />
		<copy file="${antlrjar}" tofile="${dist}/lib/antlr3.jar" />
		<copy todir="${dist}" file="misc/README" />
	</target>

	<target name="jar" depends="build,run-tests">
		<tstamp>
			<format property="TODAY" pattern="d-MMMM-yyyy hh:mm aa" locale="en,UK"/>
		</tstamp>

		<copy todir="${build}" file="misc/logging.properties" />

		<jar basedir="${build}" destfile="${destjar}">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Main-Class" value="ch.codedump.ooplss.Main" />
				<section name="common">
					<attribute name="Specification-Title" value="OOPLSS" />
					<attribute name="Specification-Version" value="1.0" />
					<attribute name="Specification-Vendor" value="codedump.ch" />
					<attribute name="Implementation-Title" value="OOPLSS" />
					<attribute name="Implementation-Version" value="1.0 ${TODAY}" />
					<attribute name="Implementation-Vendor" value="codedump.ch" />
				</section>
				<attribute name="Class-Path" value="lib/antlr3.jar" />
			</manifest>
		</jar>
	</target>

	<!-- Testing -->
	<target name="run-tests" depends="gunit,junit">
	</target>

	<!-- JUnit Testing -->
	<target name="junit" depends="build-test">
		<mkdir dir="${reports}" />
		<junit printsummary="yes">
			<classpath refid="classpath" />
			<sysproperty key="basedir" value="${build}"/>

			<formatter type="plain"/>

			<batchtest fork="yes" todir="${reports}">
				<fileset dir="${build}">
					<include name="**/test/**/Test*.class"/>
					<exclude name="**/test/**/AllTests.class"/>
				</fileset>
			</batchtest>
		</junit>
	</target>


	<!-- runs every gunit test -->
	<target name="gunit" depends="build">
		<foreach param="gunit-file" target="call-gunit">
			<path>
				<fileset dir="${gunit-testdir}" includes="**/*.gunit" />
			</path>
		</foreach>
	</target>

	<!-- Wrapper target for macrodef run-gunit -->
<target name="call-gunit">
	<run-gunit test-file="${gunit-file}" />
</target>

<!-- macro to perform a gunit test. the gunit file name is the test-file attribute -->
<macrodef name="run-gunit">
	<attribute name="test-file" />
	<sequential>
		<echo message="Running @{test-file}" />
		<java classname="org.antlr.gunit.Interp">
			<classpath refid="classpath" />
			<arg value="@{test-file}" />
		</java>
	</sequential>
</macrodef>

	<target name="gunit-simpleClass">
		<run-gunit test-file="grammar/test/simpleClass.gunit" />
	</target>

	<target name="gunit-simpleMethod">
		<run-gunit test-file="grammar/test/simpleMethod.gunit" />
	</target>

	<target name="gunit-statements">
		<run-gunit test-file="grammar/test/statements.gunit" />
	</target>

	<target name="gunit-tokensLiterals">
		<run-gunit test-file="grammar/test/tokensLiterals.gunit" />
	</target>

	<target name="gunit-blocks">
		<run-gunit test-file="grammar/test/blocks.gunit" />
	</target>

	<target name="gunit-conditionals">
		<run-gunit test-file="grammar/test/conditionals.gunit" />
	</target>

	<target name="gunit-ast-statements">
		<run-gunit test-file="grammar/test/ast-statements.gunit" />
	</target>

	<target name="gunit-ast-classes">
		<run-gunit test-file="grammar/test/ast-classes.gunit" />
	</target>

	<target name="gunit-ast-methods">
		<run-gunit test-file="grammar/test/ast-methods.gunit" />
	</target>

	<target name="gunit-ast-class">
		<run-gunit test-file="grammar/test/ast-class.gunit" />
	</target>

	<target name="gunit-ast-conditionals">
		<run-gunit test-file="grammar/test/ast-conditionals.gunit" />
	</target>

	<!-- the simple test, do not include it in the overall build -->
	<target name="simple-test" depends="build">
		<java classname="ch.codedump.ooplss.simpletest.SimpleTest">
			<classpath refid="classpath" />
		</java>
	</target>

	<target name="tree-test" depends="build">
		<java classname="ch.codedump.ooplss.simpletest.TreeTest">
			<classpath refid="classpath" />
		</java>
	</target>

	<target name="def-test" depends="build">
		<java classname="ch.codedump.ooplss.simpletest.DefTest">
			<classpath refid="classpath" />
		</java>
	</target>
</project>

gunit Ooplss;

@header {
package ch.codedump.ooplss.antlr;
}

/**
 * Test different types of statements
 */

<<<<<<< HEAD
<<<<<<< HEAD


<<<<<<< HEAD
// assignments do not have the ';'
assignmentEntry:
"identifier = 3 + 3" OK
"blah=\"dings\"" OK
"foo = 'c'" OK
"foo=" FAIL
"foo=bar" OK
"x.y() = 3" OK
"x.a = 4" OK
"x.y().foo.bar().blubb = x.y().retVal.fo0()" OK


atom:
"abc" OK
"(dings + bums)" OK
"blah[foo]" OK
"blah[3]" OK
"x.y()" OK
"self.var" FAIL // fucking keyword
"self.blubber" OK
"foo[]" FAIL
"true" OK
"false" OK

pointExpr:
"3*3" OK
"3 * 1823" OK
"4 / 1" OK
"4 * 4 * 12 * 3" OK
"(1 + 2) * 4" OK
"3 *" FAIL
"* 44" FAIL
"3 * x.y()" OK
"a.b(\"hallo\") * dings" OK

dashExpr:
"3+3" OK
"14 + 28" OK
"128 + 3 * 4" OK
"14 - 1111" OK
"\"foo\" + 3" OK
"6+" FAIL
"+18" FAIL
"x.y() + 13" OK
"3 + -4" OK
"-13 - -18" OK

equality:
"3 == 4" OK
"3 != 2" OK
"x.y()+14 * (3+2)" OK

inequality:
"3 > 4" OK
"3 >= 4" OK
"123 < x.y()" OK
"blah <= blubb" OK

andExpr:
"blubb && foo" OK
"3 && \"haha\"" OK
"14 && 28" OK
"3 * 4 + 18 && (17 && 8*2)" OK
"3 &&" FAIL
"&& 4" FAIL
"4 && z.x(id, \"haha\")" OK
"4 + 2 == 2 && x.y()" OK

orExpr:
"123 || \"hallo\"" OK
"ID || abc && dings" OK
"a.b(id) || x.y(\"haha\", 3)" OK

statement:
"3 + 4 * 18 && 37 || 28 " OK
"x.foo(y)" OK
"x.foo(y).blah.shizzle(\"mizzle\").a" OK

blockStatement:
"x = 3;" OK
"x" FAIL
//";" OK
"x;" OK
"y.x();" OK
"a.b(c);" OK
"3 + 4 * y.x(\"hallo\", welt) && 37;" OK
"var foo:bar;" OK
"blubb = x.y();" OK

=======
=======
>>>>>>> Grammar: statements
=======
argument:
"BLAH" OK
"foo" OK
"3" OK
"\"dingsbums\"" OK
"self.blubb" OK

>>>>>>> Some changes to the ID
methodCall:
"x.y()" OK
"x.y(blah)" OK
"x.y(blah, blubb)" OK
"x.y(blah blubb)" FAIL
"x.y(3, dings)" OK
"x.y(3, 'd')" OK 
"x.y(3, \"dddd\")" OK 
"x.y('3')" OK
<<<<<<< HEAD
>>>>>>> Grammar: method calls
=======
"x.+(3)" OK
"x.-(5)" OK
"x./(3)" OK
"x.*(14)" OK
<<<<<<< HEAD
>>>>>>> Grammar: special method calls and block testing
=======
"self.foo(13)" OK
>>>>>>> Some changes to the ID

// assignments do not have the ';'
assignmentEntry:
"identifier = 3 + 3" OK
"blah=\"dings\"" OK
"foo = 'c'" OK
"foo=" FAIL
"foo=bar" OK

atom:
"abc" OK
"x.y()" OK
"(dings + bums)" OK
"self.var" OK

pointExpr:
"3*3" OK
"3 * 1823" OK
"4 / 1" OK
"4 * 4 * 12 * 3" OK
"(1 + 2) * 4" OK
"3 *" FAIL
"* 44" FAIL
"3 * x.y()" OK
"a.b(\"hallo\") * dings" OK

dashExpr:
"3+3" OK
"14 + 28" OK
"128 + 3 * 4" OK
"14 - 1111" OK
"\"foo\" + 3" OK
"6+" FAIL
"+18" FAIL
"x.y() + 13" OK
"3 + -4" OK
"-13 - -18" OK

andExpr:
"blubb && foo" OK
"3 && \"haha\"" OK
"14 && 28" OK
"3 * 4 + 18 && (17 && 8*2)" OK
"3 &&" FAIL
"&& 4" FAIL
"4 && z.x(id, \"haha\")" OK

orExpr:
"123 || \"hallo\"" OK
"ID || abc && dings" OK
"a.b(id) || x.y(\"haha\", 3)" OK

statement:
"3 + 4 * 18 && 37 || 28 " OK
"x.foo(y)" OK

blockStatement:
"x = 3;" OK
"x" FAIL
";" OK
"x;" OK
"y.x();" OK
"a.b(c);" OK
"3 + 4 * y.x(\"hallo\", welt) && 37;" OK
"var foo:bar;" OK
"blubb = x.y();" OK



group Ooplss;

initTypeMapping ::= [
        "Int":"0",
        "Float":"0.0",
        "Char":"'\0'",
        "String":"null",
        "Bool":"false",
        default:"null"
]

javaTypeMapping ::= [
        "Int":"Integer",
        "Float":"Double",
        "Char":"Character",
        "String":"String",
        "Bool":"Boolean",
        "Void":"void"
]

varNameMapping ::= [
        "base":"super",
        "self":"this"
]

varname(name) ::= <<
<if(varNameMapping.(name))><varNameMapping.(name)><else><name><endif>
>>

typename(type) ::= <<
<if(javaTypeMapping.(type))><javaTypeMapping.(type)><else><type><endif>
>>

classdef(name, supertype, superclass, fields, methods, myTypeDefs, superclassMyTypeDefs, supertypeMyTypeDefs) ::= <<
body<name>(includeSupertype, <myTypeDefs.keys:{k | <k>="<myTypeDefs.(k)>"}; separator=", ">) ::= \<\<
  \<if(includeSupertype)\><if(supertype)>\<body<supertype>(includeSupertype="true", <supertypeMyTypeDefs.keys:{k | <k>="<supertypeMyTypeDefs.(k)>"}; separator=", ">)\><endif>\<endif\>
  <if(superclass)>  \<body<superclass>(includeSupertype="true", <superclassMyTypeDefs.keys:{k | <k>="<superclassMyTypeDefs.(k)>"}; separator=", ">)\><endif>
  <fields; separator="\n">
  <methods; separator="\n">
\>\>

class<name>() ::= \<\<
public static class <name> <if(supertype)>extends <supertype><endif> {
  \<body<name>()\>
}
\>\>
>>

method(name, params, return_type, exprs) ::= <<
  protected <typename(return_type)> <name>(<params; separator=", ">) {
    <if(exprs)><exprs; separator=";\n">;<endif>
  }
>>

constructor(name, params, exprs, cstr1, cstrArgs1, cstr2, cstrArgs2) ::= <<
  protected <name>$Constructor(<params; separator=", ">) {
    <if(cstr1)><cstr1>$Constructor(<cstrArgs1; separator=",">);<endif>
    <if(cstr2)><cstr2>$Constructor(<cstrArgs2; separator=",">);<endif>
    <if(exprs)><exprs; separator=";\n">;<endif>
  }
>>

method_param(name, type) ::= <<
<typename(type)> <name>
>>

method_call(name, params) ::= <<
<name>(<params; separator=", ">)
>>

new_object(name, params) ::= <<
new <name>(<params; separator=", ">)
>>

fielddef(name, type) ::= <<
  public <typename(type)> <name> = <initTypeMapping.(type)>;
>>

vardef(name, type) ::= <<
<typename(type)> <name> = <initTypeMapping.(type)>
>>

return(expr) ::= <<
return<if(expr)> <expr><endif>
>>

assign(var, stmt) ::= <<
<var> = <stmt>
>>

binoperator(op, left, right) ::= <<
(<left> <op> <right>)
>>

call_operator(left, right) ::= <<
<left>.<right>
>>

block(exprs) ::= <<
{
  <exprs; separator=";\n"><if(exprs)>;<endif>
}
>>

if_statement(cond, block, elifBlocks, elseBlock) ::= <<
if (<cond>) <block> <elifBlocks; separator="\n"> <elseBlock>
>>

elseif(cond, block) ::= <<
else if (<cond>) <block>
>>

else(block) ::= <<
else <block>
>>

while_statement(cond, block) ::= <<
while (<cond>) <block>
>>

// Application classes used for proper running

prog(classes) ::= <<
<classes; separator="\n">
>>
